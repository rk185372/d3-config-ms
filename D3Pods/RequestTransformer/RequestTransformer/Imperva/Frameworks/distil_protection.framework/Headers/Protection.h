#ifndef Protection_h
#define Protection_h

#include <Foundation/Foundation.h>

/**
 Error domain used in SDK specific errors.
*/
__attribute((visibility("default"))) extern NSErrorDomain _Nonnull distilErrorDomain;

/**
 Class which provides access to the tokens generated by a Distil edge node.
*/
__attribute((visibility("default"))) @interface Protection : NSObject

/**

 Initializes a new Protection instance.

 This method begins a pre-fetch of a token in the background but otherwise does not do any
 expensive operations.

 @param challengeUrl
    The server sdk challenge path used to obtain tokens.
    Example: https://api.example.com/my-challenge-path
 @return A `Protection` instance that can be used to obtain a token.
*/
- (nonnull id)initWithChallengeUrl:(nonnull NSURL*)challengeUrl;

#ifdef DEBUG
/**

 Initializes a new Protection instance.

 This method begins a pre-fetch of a token in the background but otherwise does not do any
 expensive operations.

 @param challengeUrl
    The server sdk challenge path used to obtain tokens.
    Example: https://api.example.com/my-challenge-path
 @param debugKey
    The key for authentication to access the debug information from
    the Distil SDK (if configured).
    Example: debug-secret
    NOTE: For *debug purposes only*, this should _never_ be released,
    having this active in a release will not only increase the
    network traffic, it might also expose behaviour of the protection
    and thereby weakening it.

 @return A `Protection` instance that can be used to obtain a token.
 */
- (nonnull id)initWithChallengeUrl:(nonnull NSURL*)challengeUrl debugKey:(nonnull NSString*) debugKey;
#endif

/**

 Queries the Distil edge node for a token that should be sent as the `X-D-Token` HTTP header with
 every request.

 The token is a string safe to use in HTTP requests.

 `getToken/getTokenWithCompletionHandler` must be called with every HTTP request done by the
 application to ensure that the token has not expired. Caching of the token is done internally to
 prevent unnecessary requests.

 The method is thread-safe and may block until a token is available and must <strong>not</strong>
 be called on the UI thread. This method is run on the same operation queue as
 `getTokenWithCompletionHandler` and must therefore not be called inside a `completionHandler` of
 that method.

 See: getTokenWithCompletionHandler

 @param error Out-parameter which gets assigned a non-nil value if the call failed.
    Network errors (errors with the domain NSURLErrorDomain) are not handled in any way by the SDK
    and are returned as-is and should be treated the same as network errors are elsewhere in the
    app. All other errors should be considered internal errors to the SDK itself. If an internal
    error is received then we recommend that the app logs the error and proceeds with an empty ("")
    token.

 @return Returns a non-nil token if the call succeeds, otherwise nil.

*/
- (nullable NSString*)getToken:(NSError* _Nullable* _Nonnull)error;


/**

 Queries the Distil edge node for a token that should be sent as the `X-D-Token` HTTP header with
 every request.

 The token is a string safe to use in HTTP requests.

 `getToken/getTokenWithCompletionHandler` must be called with every HTTP request done by the
 application to ensure that the token has not expired. Caching of the token is done internally to
 prevent unnecessary requests.

 This method is thread-safe. If a second call is made while this method is still executing the
 `completionHandler` gets scheduled to execute after the first handler finishes.

 See: getToken

 @param completionHandler Called when the call completes with a non-nil token if the call succeeded.
    Network errors (errors with the domain NSURLErrorDomain) are not handled in any way by the SDK
    and are returned as-is and should be treated the same as network errors are elsewhere in the
    app. All other errors should be considered internal errors to the SDK itself. If an internal
    error is received then we recommend that the app logs the error and proceeds with an empty ("")
    token.

*/
- (void)getTokenWithCompletionHandler:(void (^ _Nonnull)(NSString* _Nullable token, NSError* _Nullable error))completionHandler;

@end

#endif /* Protection_h */
